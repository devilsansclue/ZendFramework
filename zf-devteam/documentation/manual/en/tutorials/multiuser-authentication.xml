<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="learning.multiuser.authentication">
    <title>Authenticating Users in ZF</title>

    <sect2 id="learning.multiuser.authentication.intro">
        <title>Introduction to Authentication</title>
        
        <para>
            Once a web application has been able to distinguish one user from another by establishing a 
            session, web applications typically want to validate the identity of a user.  The process 
            of validating a consumer as being authentic is "authentication."  Authentication is made up 
            of two distinctive parts: an identity and a set of credentials.  It takes some variation of 
            both presented to the application for processing so that it may authenticate a user.    
        </para>
        
        <para>
            While the most common pattern of authentication revolves around usernames and passwords,
            it should be stated that this is not always the case.  Identities are not limited to 
            usernames.  In fact, any public identifier can be used: an assigned number, social security 
            number, or residence address.  Likewise, credentials are not limited to passwords.  
            Credentials can come in the form of protected private information: fingerprint, eye retinal 
            scan, passphrase, or any other obscure personal information.  
        </para>
        
    </sect2>

    <sect2 id="learning.multiuser.authentication.basic-usage">
        <title>Basic Usage of Zend_Auth</title>
        
        <para>
            In the following example, we will be using Zend_Auth to complete what is probably the most
            prolific form of authentication: username and password from a database table.  This
            example assumes that you have already setup your application using Zend_Application, and
            that inside that application you have configured a database connection.
        </para>
        
        <para>
            The job of the Zend_Auth class is twofold.  First, it should be able to accept an
            authentication adapter to use to authenticate a user.  Secondly, after a successful
            authentication of a user, it should persist throughout each and every request that might
            need to know if the current user has indeed been authenticated.  To persist this data,
            Zend_Auth consumes Zend_Session_Namespace, but you will generally never need to interact
            with this session object.
        </para>
        
        <para>
            Lets assume we have the following database table setup:
        </para>
        
        <programlisting language="php"><![CDATA[
CREATE TABLE users (
    id INTEGER  NOT NULL PRIMARY KEY, 
    username VARCHAR(50) UNIQUE NOT NULL, 
    password VARCHAR(32) NULL, 
    password_salt VARCHAR(32) NULL,
    real_name VARCHAR(150) NULL
)
]]></programlisting>

        <para>
            The above demonstrates a user table that includes a username, password, and also a 
            password salt column.  This salt column is used as part of a technique called salting that 
            would improve the security of your database of information against brute force attacks 
            targeting the algorithm of your password hashing. < link to salting >
        </para>
        
<!-- explain the database schema -->

<!-- explain usage of a form -->

<!-- explain the user object -->

<!-- explain the controller itself -->

        <programlisting language="php"><![CDATA[
class AuthController extends Zend_Controller_Action
{

    public function loginAction()
    {
        $db = $this->_getParam('db');
        
        $form = new Default_Auth_Form($_POST);
        
        if ($form) {
        
        } else {
        
            $adapter = new Zend_Auth_Adapter_DbTable(
                $db,
                'users',
                'username',
                'password',
                "MD5(CONCAT('"
                . "', ?, password_salt))"
                );
            
            $result = $auth->authenticate($adapter);
            
            if ($result->isValid()) {
                // store the user object
            } else {
                // not valid
            }
            
        }

    }

}
]]></programlisting>

    
        
        
    </sect2>

</sect1>

