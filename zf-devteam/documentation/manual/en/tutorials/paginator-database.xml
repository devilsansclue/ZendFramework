<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="learning.paginator.database">
    <title>Usage with a database</title>
    
    <para>
        This section of the text assumes that you are familiar with the basics of constructing
        a SELECT query using <classname>Zend_Db_Select</classname>. If you are not familiar with
        <classname>Zend_Db_Select</classname> yet, you should read its tutorial first before
        continuing reading this section. 
    </para>
    
    <para>
        In these examples we will look at a table with blog posts called 'posts'.
        The 'posts' table has four columns: id, title, body, date_created.
        Let's dive right in and have a look at a simple example.
    </para>
    
    <programlisting language="php"><![CDATA[
// Create a select query. $db is a Zend_Db_Adapter object, which we assume
// already exists in your script.
$select = $db->select()->from('posts')->order('date_created DESC');

// Get a Paginator object using Zend_Paginator's built-in factory.
$paginator = Zend_Paginator::factory($select);

?><ul><?php

// Render each the title of each post for the current page in a list-item
foreach ($paginator as $item) {
    echo '<li>' . $item->title . '</li>';
}

?></ul>
]]></programlisting>
    
    <para>
        As you can see, this example is not that different from the first one in the previous section!
        The only difference is that you pass a <classname>Zend_Db_Select</classname> object to the 
        Paginator's <methodname>factory()</methodname> method, rather than an array.
        Why is it then, that database pagination has a dedicated section in this text?
    </para>
    
    <para>
        One of the primary reasons for giving database pagination its own section is to explain how
        Paginator retrieves the results from the database. It is not uncommon for a database table
        to contain thousands of records. As you can imagine, retrieving thousands of records each time
        you want to display, say, 10 record on the screen, is not very efficient. In case you're writing
        a query to display  a small selection of all the records manually, you would probably add
        a LIMIT clause to your query. This is exactly what Paginator does, only automatically!
        This means that you should only worry about creating your SELECT query. Paginator will add
        the LIMIT clause for you, with the correct parameters for offset and range.
        Because Paginator uses Zend_Db_Select's query API to add the LIMIT clause, this approach works even
        when your database does not support the LIMIT clause.
    </para>
    
    <!-- To Be Continued -->
</sect1>
