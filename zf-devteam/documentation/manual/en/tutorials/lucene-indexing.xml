<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="learning.lucene.indexing">
    <title>Indexing</title>

    <para>
        Indexing is performed by adding new document to the existing or just created index:
    </para>

$index->addDocument($doc);

    <para>
        There are two ways to create document object.
    </para>

    <para>
        The first one is to do it manually:
    </para>

    <example id="learning.lucene.indexing.doc-creation">
        <title>Manual document constructing</title>

        <programlisting language="php"><![CDATA[
$doc = new Zend_Search_Lucene_Document();
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
$doc->addField(Zend_Search_Lucene_Field::Text('title', $docTitle));
$doc->addField(Zend_Search_Lucene_Field::unStored('contents', $docBody));
$doc->addField(Zend_Search_Lucene_Field::binary('avatar', $avatarData));
]]></programlisting>
    </example>
    
    <para>
        The second is to load it from HTML or MS Office 2007 files:
    </para>

    <example id="learning.lucene.indexing.doc-loading">
        <title>Document loading</title>

        <programlisting language="php"><![CDATA[
$doc = Zend_Search_Lucene_Document_Html::loadHTML($htmlString);
$doc = Zend_Search_Lucene_Document_Docx::loadDocxFile($path);
$doc = Zend_Search_Lucene_Document_Pptx::loadPptFile($path);
$doc = Zend_Search_Lucene_Document_Xlsx::loadXlsxFile($path);
]]></programlisting>
    </example>

    <para>
        If document is loaded form one of the supported format, it still can be extended manually 
        with new user defined fields.
    </para>

    <para>
        You should define indexing policy within your application architectural design.
    </para>

    <para>
        You may need indexing on demand configuration (something like OLTP system). It usually 
        adds one document per user request, so <emphasis>MaxBufferedDocs</emphasis> parameter 
        doesn't affect such systems. On the other hand <emphasis>MaxMergeDocs</emphasis> is 
        really helpful for such configurations since it allows to limit maximum script execution 
        time. <emphasis>MergeFactor</emphasis> should be set to the value that keeps balance 
        between average indexing time (it's also affected by average auto-optimization time) and 
        search performance (index optimization level dependent on number of segments).
    </para>

    <para>
        Batch index updating configuration should use <emphasis>MaxBufferedDocs</emphasis> option 
        set to the maximum value supported by available amount of memory. 
        <emphasis>MaxMergeDocs</emphasis> and <emphasis>MergeFactor</emphasis> have to be 
        set to the values reducing auto-optimization involvement as much as possible 
        <footnote><para>Additional limit is a maximum file handlers supported by operation system 
        for concurrent opening</para></footnote>. Full index optimization should be applied after 
        indexing:
    </para>

    <example id="learning.lucene.indexing.optimization">
        <title>Index optimization</title>

        <programlisting language="php"><![CDATA[
$index->optimize();
]]></programlisting>
</example>

    <para>
        In some configurations it's more effective to serialize index update by organizing update 
        request into queue and processing several update requests by one script execution. That 
        reduces index opening overhead and allows to utilize indexing docs buffering.
    </para>

</sect1>
