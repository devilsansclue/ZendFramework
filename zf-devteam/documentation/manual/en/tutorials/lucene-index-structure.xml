<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="learning.lucene.index-structure">
    <title>Lucene index structure</title>

    <para>
        You have to understand internal index structure to utilize Zend_Search_Lucene 
        capabilities with maximum performance.
    </para>
    
    <para>
        Index is stored in a set of files within one directory.
    </para>

    <para>
        Index consists of number of independent segments which store info about subset 
        of indexed documents. Each segment has its own terms dictionary, terms dictionary 
        index and document (stored field values) storage <footnote><para>Starting with Lucene 2.3 
        doc store files can be shared between segments, but Zend_Search_Lucene component doesn't 
        use this capability</para></footnote>. All segment data are stored in _xxxxx.cfs files, 
        where xxxxx is a segment name.
    </para>

    <para>
        Once index segment file is created, it can't be updated.
    </para>

    <para>
        New documents come into new segments.
    </para>

    <para>
        Deleted documents are only marked as deleted in an optional &lt;segmentname&gt;.del file. 
    </para>

    <para>
        Document updating is performed as delete/add operation even it's done using 
        <methodname>update()</methodname> API call<footnote><para>this call is provided only by 
        Java Lucene now, but it's planned to extend Zend_Search_Lucene API with similar 
        functionality</para></footnote>.
    </para>

    <para>
        That simplifies adding new documents and allows to do it concurrently with searching 
        through the index.
    </para>

    <para>
        On the other hand using several segments (one document per segment as a borderline case) 
        increases search time:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                retrieving term from a dictionary is performed for each segment;
            </para>
        </listitem>

        <listitem>
            <para>
                terms dictionary index is pre-loaded for each segment (it takes the most search 
                time for simple queries and it's also needs additional memory).
            </para>
        </listitem>
    </itemizedlist>

    <para>
        If terms dictionary reaches saturation point then search through one segment is 
        <emphasis>N</emphasis> times faster than search through <emphasis>N</emphasis> segments 
        for the most of cases.
    </para>

    <para>
        Index optimization merges two or more segments into new one. New segment is added to the 
        index segments list and old segments are excluded.
    </para>

    <para>
        Segment list updates are performed as an atomic operation. It gives an ability of 
        concurrent adding new documents, index optimization and searching through the index.
    </para>

    <para>
        Index auto-optimization is performed after each new segment generation. It merges sets 
        of smallest segments into larger and larger into more larger, if we have enough segments 
        to merge.
    </para>

    <para>
        Index auto-optimization is controlled by three options:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis>MaxBufferedDocs</emphasis> (a minimal number of documents required before 
                the buffered in-memory documents are written into a new segment);
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>MaxMergeDocs</emphasis> (a largest number of documents ever merged 
                by optimization operation);
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>MergeFactor</emphasis> (determines how often segment indices are merged 
                by auto-optimization operation);
            </para>
        </listitem>
    </itemizedlist>

    <para>
        If we add one document per script execution then <emphasis>MaxBufferedDocs</emphasis> is 
        actually not used (new segment with only one document is created at the end of script 
        execution, then auto-optimization process starts).
    </para>
</sect1>
