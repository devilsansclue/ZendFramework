<?php

require_once 'Zend/Db/TestSuite/DbUtility/SQLDialect/Base.php';

class Zend_Db_TestSuite_DbUtility_SQLDialect_Db2 extends Zend_Db_TestSuite_DbUtility_SQLDialect_Base
{

    public function supportsIfNotExists()
    {
        return false;
    }
    
    protected function _getCreateTableSQLColumnType($type)
    {
        if ($type == 'IDENTITY') {
            return 'INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY'; 
        }
        if ($type == 'DATETIME') {
            return 'DATE';
        }
        return $type;
    }
    
    protected function _getCreateTableSQLPostProcess($tableName, $columns, $sql)
    {
        foreach ($columns as $col) {
            if (($desPos = strpos($col, 'INTEGER NOT NULL GENERATED ')) !== false) {
                $identityName = str_replace(array('\'', '"', '`'), '', trim(substr($col, 0, $desPos)));
                $this->_lastCreateTableIdentityName = $identityName;
                return;
            }
        }
    }

    public function getHasTableSQL($tableName)
    {
        $sql = $this->_dbAdapter->quoteInto(
            'SELECT COUNT(T.TABLE_NAME) FROM SYSIBM.TABLES T WHERE UPPER(T.TABLE_NAME) = UPPER(?)',
            $tableName
            );
        return $sql;
    }

    public function getResetIdentitySQL($tableName, $identityName)
    {
        return 'ALTER TABLE ' . $this->_dbAdapter->quoteIdentifier($tableName) 
            . ' ALTER COLUMN ' . $this->_dbAdapter->quoteIdentifier($identityName) . ' RESTART WITH 1';
    }
    
    public function getHasSequenceSQL($sequenceName)
    {
        return 'SELECT UPPER(S.SEQNAME) FROM SYSIBM.SYSSEQUENCES S ' 
            . $this->_dbAdapter->quoteInto(' WHERE UPPER(S.SEQNAME) = UPPER(?)', $sequenceName);
    }
    
    public function getCreateSequenceSQL($sequenceName)
    {
        return 'CREATE SEQUENCE ' . $this->_dbAdapter->quoteIdentifier($sequenceName, true) 
            . ' AS INT START WITH 1 INCREMENT BY 1 MINVALUE 1';
    }
    
    public function getResetSequenceSQL($sequenceName)
    {
        return 'ALTER SEQUENCE ' . $this->_dbAdapter->quoteIdentifier($sequenceName, true)
            . ' RESTART WITH 1';
    }
    
    public function getDropSequenceSQL($sequenceName)
    {
        return 'DROP SEQUENCE ' . $this->_dbAdapter->quoteIdentifier($sequenceName, true) . ' RESTRICT';
    }
    
    /*
    public function getHasViewSQL($viewName)
    {
        $sql = $this->_dbAdapter->quoteInto(
            'SELECT ((SELECT relname FROM pg_class WHERE relkind = \'v\' AND relname = ?) IS NOT NULL) as view_exists',
            $viewName
            );
        return $sql;
    }
    */
    
    /*
    public function getDropTableSQL($tableName)
    {
        return parent::getDropTableSQL($tableName) . ' CASCADE';
    }
    
    public function getHasSequenceSQL($sequenceName)
    {
        $sql = $this->_dbAdapter->quoteInto(
            'SELECT ((SELECT relname FROM pg_class WHERE relkind = \'S\' AND relname = ?) IS NOT NULL) as sequence_exists',
            $sequenceName
            );
        return $sql;
    }
    
    public function getResetSequenceSQL($sequenceName)
    {
        return 'ALTER SEQUENCE ' . $this->_dbAdapter->quoteIdentifier($sequenceName) . ' RESTART WITH 1';
    }
    


    */
    
    
    
    
    /*
    protected function _getCreateTableSQLTableName($tableName)
    {
        return 'CREATE TABLE IF NOT EXISTS ' . $this->_dbAdapter->quoteIdentifier($tableName);
    }


    
    protected function _getCreateTableSQLTableType()
    {
        return ' ENGINE=InnoDB';
    }

    public function getDeleteFromTableSQL($tableName)
    {
        return 'TRUNCATE TABLE ' . $this->_dbAdapter->quoteIdentifier($tableName, true);
    }
    
    public function getDropTableSQL($tableName)
    {
        return 'DROP TABLE IF EXISTS ' . $this->_dbAdapter->quoteIdentifier($tableName);
    }
    
    public function getCreateProcedureSQL($procedureName, $body)
    {
        $sql = 'CREATE PROCEDURE ' . $procedureName . ' ' . $body;
        return $sql;
    }
    
    public function getDropProcedureSQL($procedureName)
    {
        return 'DROP PROCEDURE IF EXISTS ' . $this->_dbAdapter->quoteIdentifier($procedureName);
    }
    
    protected function _getCreateViewSQLViewName($viewName)
    {
        return 'CREATE OR REPLACE VIEW ' . $this->_dbAdapter->quoteIdentifier($viewName, true);
    }

    public function getDropViewSQL($viewName)
    {
        return 'DROP VIEW IF EXISTS ' . $this->_dbAdapter->quoteIdentifier($viewName, true);
    }
    */

}
