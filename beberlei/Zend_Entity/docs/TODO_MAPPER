TODO

* Type Casting: Test it
* Implement support for Custom Collection Classes
* Remove Zend_Entity_Interface typehint everywhere
* Query API: Query Object in Domain Speak translating all properties and foreign entity access to internal SQL.
* EventDispatcher: prePersist(), postPersist(), preRemove(), postRemove(), preUpdate(), postUpdate(), postLoad()
* EntityManager: Decouple Zend_Db_Adapter into the Mapper
* Definitions: Initializing of Loader and Persister and fetching of relations should be done lazy
* Definitions: Add compound keys through a PrimaryKey object.
* Definitions: Entity - Add Namespace argument for entities to write less on Subnamespaced entities when referencing them.
* Definitions: Add Entity-Name Configuration Option
* Collections: Add difference between Set, Map and List ?! May even add Ordered Lists via callback or own implementation
* Lazy Load Entities: Class has to be overwritable to implement the Entity interface that fakes identity.
* Mapper: Save and Delete
    * Implement Cascading Persisters
* Mapper: merge/refresh() method needs specific API method on the loader to be useful
* EntityManager: Implement Second Level Cache into IdentityMap - Zend_Cache holds objects in Cache for a lifetime, re-cached on each change
    * Easy: Cachable are only the Database representations of an object, not the object itsself. This way all the objects are saved on their own
    * Dependency: Implement Registry or Factory for EntityManager, allowing to serialize/deserialize Lazy Load collections corretcly
* Persister/Loader: Handle Bi-directional relationsships according to EJB standard.

Version 1.1
Unit Of Work Session Decorator
 * Force entities to implement interface "Footprint", which has to be userland implemented to notify unit of work of changes
 * On commit, walk over all entities that are in the context and compare footprint to the original one.


Workable Tests:
* Self referencing objects
* Association table loading
* Persisting collections